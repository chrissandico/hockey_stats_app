import 'package:hive/hive.dart';

// Part file declaration for Hive code generation
// This tells the build_runner to look for instructions in this file
// and generate a corresponding .g.dart file.
part 'data_models.g.dart';

// --- Player Model ---
// Annotation to tell Hive to generate a TypeAdapter for this class.
// The typeId must be unique across all your Hive objects.
@HiveType(typeId: 0)
class Player extends HiveObject {
  // Annotation for each field you want to store in Hive.
  // The fieldId must be unique within this class.
  @HiveField(0)
  String id; // Unique Identifier (e.g., UUID generated by the app)

  @HiveField(1)
  int jerseyNumber; // Required

  @HiveField(2)
  String? teamId; // Optional: Link to Team Entity ID if multiple teams

  @HiveField(3) // New field for player position
  String? position;

  // We won't store googleSheetRow directly in the Hive object
  // as it's related to sync state, not the core data model.
  // The sync service will manage this mapping separately.

  // Constructor
  Player({
    required this.id,
    required this.jerseyNumber,
    this.teamId,
    this.position, // Added position to constructor
  });

  // --- Override == and hashCode for correct comparison ---
  // This allows List.contains() and other comparison methods
  // to work based on the Player's unique ID.
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Player &&
          runtimeType == other.runtimeType &&
          id == other.id; // Compare based on the unique 'id'

  @override
  int get hashCode => id.hashCode; // Hash code based on the unique 'id'
}

// --- Game Model ---
// Annotation for Hive TypeAdapter generation. Unique typeId.
@HiveType(typeId: 1)
class Game extends HiveObject {
  // Annotation for fields. Unique fieldId within this class.
  @HiveField(0)
  String id; // Unique Identifier (e.g., UUID or derived from Google Sheet)

  @HiveField(1)
  DateTime date; // Required

  @HiveField(2)
  String opponent; // Required

  @HiveField(3)
  String? location; // Optional

  // We won't store googleSheetRow directly in the Hive object.

  // Constructor
  Game({
    required this.id,
    required this.date,
    required this.opponent,
    this.location,
  });
  
  // Create a copy of this Game with some fields replaced
  Game copyWith({
    String? id,
    DateTime? date,
    String? opponent,
    String? location,
  }) {
    return Game(
      id: id ?? this.id,
      date: date ?? this.date,
      opponent: opponent ?? this.opponent,
      location: location ?? this.location,
    );
  }

  // Optional: Override == and hashCode for Game if needed for comparisons
  // @override
  // bool operator ==(Object other) =>
  //     identical(this, other) ||
  //     other is Game &&
  //         runtimeType == other.runtimeType &&
  //         id == other.id;
  //
  // @override
  // int get hashCode => id.hashCode;
}

// --- GameEvent Model ---
// Annotation for Hive TypeAdapter generation. Unique typeId.
@HiveType(typeId: 2)
class GameEvent extends HiveObject {
  // Annotation for fields. Unique fieldId within this class.
  @HiveField(0)
  String id; // Unique Identifier, generated locally

  @HiveField(1)
  String gameId; // Required: Link to Game Entity ID

  @HiveField(2)
  DateTime timestamp; // Required: When the event was logged

  @HiveField(3)
  int period; // Required

  @HiveField(4)
  String eventType; // Required: "Shot" or "Penalty"

  @HiveField(5)
  String team; // Required: "Your Team" or "Opponent"

  @HiveField(6)
  String primaryPlayerId; // Required: Link to Player Entity ID (shooter/penalized)

  @HiveField(7)
  String? assistPlayer1Id; // Optional: Link to Player Entity ID

  @HiveField(8)
  String? assistPlayer2Id; // Optional: Link to Player Entity ID

  @HiveField(9)
  bool? isGoal; // Optional: Relevant for "Shot"

  @HiveField(10)
  String? penaltyType; // Optional: Relevant for "Penalty"

  @HiveField(11)
  int? penaltyDuration; // Optional: Relevant for "Penalty"

  @HiveField(12)
  bool isSynced; // Required: Default: false. Flag for sync service.

  // --- New field for Plus/Minus tracking ---
  // Store the IDs of 'Your Team' players on the ice when a goal is scored.
  // This list will be populated when eventType is "Shot" and isGoal is true.
  @HiveField(13) // Use the next available fieldId
  List<String>? yourTeamPlayersOnIceIds; // Optional list of Player IDs

  // We won't store googleSheetRow directly in the Hive object.

  // Constructor
  GameEvent({
    required this.id,
    required this.gameId,
    required this.timestamp,
    required this.period,
    required this.eventType,
    required this.team,
    required this.primaryPlayerId,
    this.assistPlayer1Id,
    this.assistPlayer2Id,
    this.isGoal,
    this.penaltyType,
    this.penaltyDuration,
    this.isSynced = false, // Default value
    this.yourTeamPlayersOnIceIds, // Include the new field in the constructor
  });
}

// --- PlayerSeasonStats Model ---
@HiveType(typeId: 3) // Next available typeId
class PlayerSeasonStats extends HiveObject { // Extend HiveObject
  @HiveField(0)
  final String playerId; // Keep as final if it's the key and doesn't change

  @HiveField(1)
  String playerName;

  @HiveField(2)
  int playerJerseyNumber;

  @HiveField(3)
  String? playerPosition;

  @HiveField(4)
  int gamesPlayed;

  @HiveField(5)
  int goals;

  @HiveField(6)
  int assists;

  // Points is a getter, so it doesn't need a HiveField
  int get points => goals + assists;

  @HiveField(7)
  int shots;

  @HiveField(8)
  int penaltyMinutes;

  @HiveField(9)
  int plusMinus;

  PlayerSeasonStats({
    required this.playerId,
    this.playerName = '',
    this.playerJerseyNumber = 0,
    this.playerPosition,
    this.gamesPlayed = 0,
    this.goals = 0,
    this.assists = 0,
    this.shots = 0,
    this.penaltyMinutes = 0,
    this.plusMinus = 0,
  });

  // Optional: Add a method to update from a Player object if needed elsewhere
  void updatePlayerDetails(Player player) {
    // PlayerName is likely derived from player.id or set when PlayerSeasonStats is created
    // If player.id is "NAME_JERSEY", playerName should be "NAME"
    // For now, this method primarily updates jersey and position if they change on the Player object
    playerJerseyNumber = player.jerseyNumber;
    playerPosition = player.position;
  }
}
